#include "OpenTestItf.hpp"
#include "Log.hpp"
#include "LuaAdapter.hpp"
#include "RegisterC.hpp"
#include "CommonUtil.hpp"
#include <string>
#include <vector>
#include "luaAPI.hpp"
#include "OpenLuaItf.hpp"
void main_Itf(std::string &luaPath,std::string &logPath)
{
	std::vector<std::string> fileContentList;
	util::readFile("config.ini",fileContentList);
	if (!fileContentList.empty())
	{
		for (int i=0;i<fileContentList.size();i++)
		{
			std::string tempStr(fileContentList[i]);
			std::string::size_type pos=tempStr.find("=");
			if (pos!=std::string::npos && tempStr.find("logPath")!= std::string::npos)
			{
				logPath.assign(tempStr.substr(pos+1));
			}
			else if(pos!=std::string::npos && tempStr.find("luaPath")!=std::string::npos)
			{
				luaPath.assign(tempStr.substr(pos+1));
			}
		}
	}
	
	initLog(logPath);

	lua_State *L =luaL_newstate();
	luaL_openlibs(L);
	reisterCFunction(L);
	OpenLuaItf::regClass(L);

	LuaAdapter::loadAllLuaScript(L,luaPath);

	lua_pop(L,lua_gettop(L));//执行脚本前先清空栈
	LuaAdapter::callALuaFunction(L,"main","exe");
	
	lua_close(L);
}